---
import { GoCommit, GoGitPullRequest, GoIssueOpened, GoStar } from "react-icons/go";
import dataJson from "../../../data.json";
import type { GitHubQueryResponse } from "../../../typings/github";


interface Props {
  data: GitHubQueryResponse;
}

const {data} = Astro.props;

function parseGitHubData(data: any) {
  const userData = data.data.user;
  const contributions = userData.contributionsCollection;
  const repositories = userData.repositories.nodes;
  const followers = userData.followers.totalCount;

  const stars = repositories.reduce(
    (acc: any, repo: any) => acc + repo.stargazers.totalCount,
    0
  );

  const stats = {
    commits: contributions.contributionCalendar.totalContributions,
    pullRequests: userData.pullRequests.totalCount,
    reviews: contributions.totalCommitContributions,
    issues: userData.issues.totalCount,
    stars,
    followers,
  };

  return stats;
}

function calculatePercentiles(stats: any): number {
  const { commits, pullRequests, reviews, issues, stars, followers } = stats;

  const commitPercentile = 1 - Math.exp(-commits / 100);
  const prPercentile = 1 - Math.exp(-pullRequests / 100);
  const reviewPercentile = 1 - Math.exp(-reviews / 100);
  const issuePercentile = 1 - Math.exp(-issues / 100);
  const starPercentile = (1 + erf(Math.log(stars) / Math.sqrt(2))) / 2;
  const followerPercentile = (1 + erf(Math.log(followers) / Math.sqrt(2))) / 2;

  const globalPercentile =
    (commitPercentile +
      prPercentile +
      reviewPercentile +
      issuePercentile +
      starPercentile +
      followerPercentile) /
    6;

  return globalPercentile * 100;
}

function mapPercentileToRank(percent: number): string {
  const percentile = 100 - percent;
  if (percentile <= 1) return "S";
  if (percentile <= 12.5) return "A+";
  if (percentile <= 25) return "A";
  if (percentile <= 37.5) return "A-";
  if (percentile <= 50) return "B+";
  if (percentile <= 62.5) return "B";
  if (percentile <= 75) return "B-";
  if (percentile <= 87.5) return "C+";
  if (percentile <= 91) return "C";
  return "D";
}

function calculateRank(stats: any) {
  const percentile = calculatePercentiles(stats);
  const rank = mapPercentileToRank(percentile);
  return { rank, percentile };
}

function erf(x: number): number {
  const a1 = 0.254829592;
  const a2 = -0.284496736;
  const a3 = 1.421413741;
  const a4 = -1.453152027;
  const a5 = 1.061405429;
  const p = 0.3275911;

  const sign = x >= 0 ? 1 : -1;
  x = Math.abs(x);

  const t = 1.0 / (1.0 + p * x);
  const y = ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t;
  return sign * (1.0 - y * Math.exp(-x * x));
}

const userdata = parseGitHubData(data);
const rank = calculateRank(userdata);
---

<div class="flex flex-row xl:gap-x-16 gap-x-8 gap-y-4 flex-wrap">
    <div class="flex flex-col gap-3">
      <div
        class="relative flex flex-col items-center justify-center w-32 h-32"
      >
        <svg class="w-full h-full" viewBox="0 0 32 32">
          <circle
            cx="16"
            cy="16"
            r="15.5"
            class="stroke-color opacity-10 fill-none"
            stroke-width="1"></circle>

          <circle
            cx="16"
            cy="16"
            r="15.5"
            class="fill-none stroke-color opacity-70"
            stroke-width="0.95"
            stroke-dasharray={`${rank.percentile}, 100`}
            transform="rotate(-90 16 16)"></circle>
        </svg>

        <div
          class="absolute flex flex-col items-center justify-center"
        >
          <h1 class="text-6xl font-extrabold font-system">{rank.rank}</h1>
        </div>
      </div>
      <div class="px-2 py-1 border-border border-b mx-auto">
        <a href={dataJson.github} class="text-base text-color">
          {dataJson.github.replace("https://github.com/", "")}
        </a>
      </div>
    </div>

    <div
      class="flex flex-col gap-4 h-full items-start justify-center w-fit"
    >
      <div class="flex items-center gap-2 w-fit">
        <span
          class="text-color font-bold xl:min-w-[200px] min-w-[120px]"
          >Total stars:
        </span>
        <GoStar size={20} />
        <span class="text-color font-system font-bold"
          >{userdata.stars}</span
        >
      </div>
      <div class="flex items-center gap-2 w-fit">
        <span
          class="text-color font-bold xl:min-w-[200px] min-w-[120px]"
          >Total issues:
        </span>
        <GoIssueOpened size={20} />
        <span class="text-color font-system font-bold"
          >{userdata.issues}</span
        >
      </div>
      <div class="flex items-center gap-2 w-fit">
        <span
          class="text-color font-bold xl:min-w-[200px] min-w-[120px]"
          >Total commits:
        </span>
        <GoCommit size={20} />
        <span class="text-color font-system font-bold"
          >{userdata.commits}</span
        >
      </div>
      <div class="flex items-center gap-2 w-fit">
        <span
          class="text-color font-bold xl:min-w-[200px] min-w-[120px]"
          >Total Pull Requests:
        </span>
        <GoGitPullRequest size={20} />
        <span class="text-color font-system font-bold"
          >{userdata.pullRequests}</span
        >
      </div>
    </div>
  </div>